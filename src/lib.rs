#![feature(untagged_unions)]

#[macro_use]
extern crate bitflags;
extern crate libc;

use libc::c_int;

// bitflags! {
//     pub flags KeyMode: c_int {
//         const REDISMODULE_READ = (1 << 0),
//         const REDISMODULE_WRITE = (1 << 1),
//     }
// }

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
    }
}

/* automatically generated by rust-bindgen */

pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const REDISMODULE_OK: ::std::os::raw::c_uint = 0;
pub const REDISMODULE_ERR: ::std::os::raw::c_uint = 1;
pub const REDISMODULE_APIVER_1: ::std::os::raw::c_uint = 1;
pub const REDISMODULE_READ: ::std::os::raw::c_uint = 1;
pub const REDISMODULE_WRITE: ::std::os::raw::c_uint = 2;
pub const REDISMODULE_LIST_HEAD: ::std::os::raw::c_uint = 0;
pub const REDISMODULE_LIST_TAIL: ::std::os::raw::c_uint = 1;
pub const REDISMODULE_KEYTYPE_EMPTY: ::std::os::raw::c_uint = 0;
pub const REDISMODULE_KEYTYPE_STRING: ::std::os::raw::c_uint = 1;
pub const REDISMODULE_KEYTYPE_LIST: ::std::os::raw::c_uint = 2;
pub const REDISMODULE_KEYTYPE_HASH: ::std::os::raw::c_uint = 3;
pub const REDISMODULE_KEYTYPE_SET: ::std::os::raw::c_uint = 4;
pub const REDISMODULE_KEYTYPE_ZSET: ::std::os::raw::c_uint = 5;
pub const REDISMODULE_KEYTYPE_MODULE: ::std::os::raw::c_uint = 6;
pub const REDISMODULE_REPLY_UNKNOWN: ::std::os::raw::c_int = -1;
pub const REDISMODULE_REPLY_STRING: ::std::os::raw::c_uint = 0;
pub const REDISMODULE_REPLY_ERROR: ::std::os::raw::c_uint = 1;
pub const REDISMODULE_REPLY_INTEGER: ::std::os::raw::c_uint = 2;
pub const REDISMODULE_REPLY_ARRAY: ::std::os::raw::c_uint = 3;
pub const REDISMODULE_REPLY_NULL: ::std::os::raw::c_uint = 4;
pub const REDISMODULE_POSTPONED_ARRAY_LEN: ::std::os::raw::c_int = -1;
pub const REDISMODULE_NO_EXPIRE: ::std::os::raw::c_int = -1;
pub const REDISMODULE_ZADD_XX: ::std::os::raw::c_uint = 1;
pub const REDISMODULE_ZADD_NX: ::std::os::raw::c_uint = 2;
pub const REDISMODULE_ZADD_ADDED: ::std::os::raw::c_uint = 4;
pub const REDISMODULE_ZADD_UPDATED: ::std::os::raw::c_uint = 8;
pub const REDISMODULE_ZADD_NOP: ::std::os::raw::c_uint = 16;
pub const REDISMODULE_HASH_NONE: ::std::os::raw::c_uint = 0;
pub const REDISMODULE_HASH_NX: ::std::os::raw::c_uint = 1;
pub const REDISMODULE_HASH_XX: ::std::os::raw::c_uint = 2;
pub const REDISMODULE_HASH_CFIELDS: ::std::os::raw::c_uint = 4;
pub const REDISMODULE_HASH_EXISTS: ::std::os::raw::c_uint = 8;
pub const REDISMODULE_ERRORMSG_WRONGTYPE: &'static [u8; 66usize] =
    b"WRONGTYPE Operation against a key holding the wrong kind of value\x00";
// pub const REDISMODULE_POSITIVE_INFINITE: f32 = inf.;
// pub const REDISMODULE_NEGATIVE_INFINITE: f32 = -inf.;
pub const REDISMODULE_TYPE_METHOD_VERSION: ::std::os::raw::c_uint = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_1>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_1>() , 4usize);
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
pub type __fsid_t = _bindgen_ty_1;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_2 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2>() , 8usize);
}
impl Clone for _bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
pub type __sigset_t = _bindgen_ty_2;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize);
    assert_eq!(::std::mem::align_of::<timespec>() , 8usize);
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize);
    assert_eq!(::std::mem::align_of::<timeval>() , 8usize);
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_3 {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3>() , 8usize);
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type fd_set = _bindgen_ty_3;
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize);
    assert_eq!(::std::mem::align_of::<pthread_attr_t>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize);
    assert_eq!(::std::mem::align_of::<__pthread_internal_list>() , 8usize);
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
pub union _bindgen_ty_4 {
    pub __data: _bindgen_ty_4___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_4___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_4___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4___pthread_mutex_s>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4___pthread_mutex_s>() ,
               8usize);
}
impl Clone for _bindgen_ty_4___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>() , 40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>() , 8usize);
}
pub type pthread_mutex_t = _bindgen_ty_4;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_5 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5>() , 4usize);
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_mutexattr_t = _bindgen_ty_5;
#[repr(C)]
pub union _bindgen_ty_6 {
    pub __data: _bindgen_ty_6__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6__bindgen_ty_1>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_6__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6>() , 48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6>() , 8usize);
}
pub type pthread_cond_t = _bindgen_ty_6;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_7 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7>() , 4usize);
}
impl Clone for _bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_condattr_t = _bindgen_ty_7;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
pub union _bindgen_ty_8 {
    pub __data: _bindgen_ty_8__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_8__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_8__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8__bindgen_ty_1>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_8__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_8() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8>() , 56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8>() , 8usize);
}
pub type pthread_rwlock_t = _bindgen_ty_8;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_9 {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9>() , 8usize);
}
impl Clone for _bindgen_ty_9 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_rwlockattr_t = _bindgen_ty_9;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_10 {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>() , 8usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrier_t = _bindgen_ty_10;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_11 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>() , 4usize);
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrierattr_t = _bindgen_ty_11;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize);
    assert_eq!(::std::mem::align_of::<_IO_FILE>() , 8usize);
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_12 {
    pub __count: ::std::os::raw::c_int,
    pub __value: _bindgen_ty_12__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_12__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_12__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12__bindgen_ty_1>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_12__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_12() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12>() , 4usize);
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
pub type __mbstate_t = _bindgen_ty_12;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_13 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13>() , 8usize);
}
impl Clone for _bindgen_ty_13 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos_t = _bindgen_ty_13;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_14 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14>() , 8usize);
}
impl Clone for _bindgen_ty_14 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos64_t = _bindgen_ty_14;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_jump_t {
    pub _address: u8,
}
impl Clone for _IO_jump_t {
    fn clone(&self) -> Self { *self }
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize);
    assert_eq!(::std::mem::align_of::<_IO_marker>() , 8usize);
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE_plus {
    pub _address: u8,
}
impl Clone for _IO_FILE_plus {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type mstime_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleCtx {
    pub _address: u8,
}
impl Clone for RedisModuleCtx {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleKey {
    pub _address: u8,
}
impl Clone for RedisModuleKey {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleString {
    pub _address: u8,
}
impl Clone for RedisModuleString {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleCallReply {
    pub _address: u8,
}
impl Clone for RedisModuleCallReply {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleIO {
    pub _address: u8,
}
impl Clone for RedisModuleIO {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleType {
    pub _address: u8,
}
impl Clone for RedisModuleType {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleDigest {
    pub _address: u8,
}
impl Clone for RedisModuleDigest {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleBlockedClient {
    pub _address: u8,
}
impl Clone for RedisModuleBlockedClient {
    fn clone(&self) -> Self { *self }
}
pub type RedisModuleCmdFunc =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut RedisModuleCtx,
                                               argv:
                                                   *mut *mut RedisModuleString,
                                               argc: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type RedisModuleTypeLoadFunc =
    ::std::option::Option<unsafe extern "C" fn(rdb: *mut RedisModuleIO,
                                               encver: ::std::os::raw::c_int)
                              -> *mut ::std::os::raw::c_void>;
pub type RedisModuleTypeSaveFunc =
    ::std::option::Option<unsafe extern "C" fn(rdb: *mut RedisModuleIO,
                                               value:
                                                   *mut ::std::os::raw::c_void)>;
pub type RedisModuleTypeRewriteFunc =
    ::std::option::Option<unsafe extern "C" fn(aof: *mut RedisModuleIO,
                                               key: *mut RedisModuleString,
                                               value:
                                                   *mut ::std::os::raw::c_void)>;
pub type RedisModuleTypeMemUsageFunc =
    ::std::option::Option<unsafe extern "C" fn(value:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_ulong>;
pub type RedisModuleTypeDigestFunc =
    ::std::option::Option<unsafe extern "C" fn(digest: *mut RedisModuleDigest,
                                               value:
                                                   *mut ::std::os::raw::c_void)>;
pub type RedisModuleTypeFreeFunc =
    ::std::option::Option<unsafe extern "C" fn(value:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct RedisModuleTypeMethods {
    pub version: u64,
    pub rdb_load: RedisModuleTypeLoadFunc,
    pub rdb_save: RedisModuleTypeSaveFunc,
    pub aof_rewrite: RedisModuleTypeRewriteFunc,
    pub mem_usage: RedisModuleTypeMemUsageFunc,
    pub digest: RedisModuleTypeDigestFunc,
    pub free: RedisModuleTypeFreeFunc,
}
#[test]
fn bindgen_test_layout_RedisModuleTypeMethods() {
    assert_eq!(::std::mem::size_of::<RedisModuleTypeMethods>() , 56usize);
    assert_eq!(::std::mem::align_of::<RedisModuleTypeMethods>() , 8usize);
}
impl Clone for RedisModuleTypeMethods {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "RedisModule_Alloc"]
    pub static mut RedisModule_Alloc:
               ::std::option::Option<unsafe extern "C" fn(bytes: usize)
                                         -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    #[link_name = "RedisModule_Realloc"]
    pub static mut RedisModule_Realloc:
               ::std::option::Option<unsafe extern "C" fn(ptr:
                                                              *mut ::std::os::raw::c_void,
                                                          bytes: usize)
                                         -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    #[link_name = "RedisModule_Free"]
    pub static mut RedisModule_Free:
               ::std::option::Option<unsafe extern "C" fn(ptr:
                                                              *mut ::std::os::raw::c_void)>;
}
extern "C" {
    #[link_name = "RedisModule_Calloc"]
    pub static mut RedisModule_Calloc:
               ::std::option::Option<unsafe extern "C" fn(nmemb: usize,
                                                          size: usize)
                                         -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    #[link_name = "RedisModule_Strdup"]
    pub static mut RedisModule_Strdup:
               ::std::option::Option<unsafe extern "C" fn(str:
                                                              *const ::std::os::raw::c_char)
                                         -> *mut ::std::os::raw::c_char>;
}
extern "C" {
    #[link_name = "RedisModule_GetApi"]
    pub static mut RedisModule_GetApi:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *const ::std::os::raw::c_char,
                                                          arg2:
                                                              *mut ::std::os::raw::c_void)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_CreateCommand"]
    pub static mut RedisModule_CreateCommand:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          name:
                                                              *const ::std::os::raw::c_char,
                                                          cmdfunc:
                                                              RedisModuleCmdFunc,
                                                          strflags:
                                                              *const ::std::os::raw::c_char,
                                                          firstkey:
                                                              ::std::os::raw::c_int,
                                                          lastkey:
                                                              ::std::os::raw::c_int,
                                                          keystep:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_SetModuleAttribs"]
    pub static mut RedisModule_SetModuleAttribs:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          name:
                                                              *const ::std::os::raw::c_char,
                                                          ver:
                                                              ::std::os::raw::c_int,
                                                          apiver:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_WrongArity"]
    pub static mut RedisModule_WrongArity:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithLongLong"]
    pub static mut RedisModule_ReplyWithLongLong:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          ll:
                                                              ::std::os::raw::c_longlong)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_GetSelectedDb"]
    pub static mut RedisModule_GetSelectedDb:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_SelectDb"]
    pub static mut RedisModule_SelectDb:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          newid:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_OpenKey"]
    pub static mut RedisModule_OpenKey:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          keyname:
                                                              *mut RedisModuleString,
                                                          mode:
                                                              ::std::os::raw::c_int)
                                         -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    #[link_name = "RedisModule_CloseKey"]
    pub static mut RedisModule_CloseKey:
               ::std::option::Option<unsafe extern "C" fn(kp:
                                                              *mut RedisModuleKey)>;
}
extern "C" {
    #[link_name = "RedisModule_KeyType"]
    pub static mut RedisModule_KeyType:
               ::std::option::Option<unsafe extern "C" fn(kp:
                                                              *mut RedisModuleKey)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ValueLength"]
    pub static mut RedisModule_ValueLength:
               ::std::option::Option<unsafe extern "C" fn(kp:
                                                              *mut RedisModuleKey)
                                         -> ::std::os::raw::c_ulong>;
}
extern "C" {
    #[link_name = "RedisModule_ListPush"]
    pub static mut RedisModule_ListPush:
               ::std::option::Option<unsafe extern "C" fn(kp:
                                                              *mut RedisModuleKey,
                                                          where_:
                                                              ::std::os::raw::c_int,
                                                          ele:
                                                              *mut RedisModuleString)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ListPop"]
    pub static mut RedisModule_ListPop:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          where_:
                                                              ::std::os::raw::c_int)
                                         -> *mut RedisModuleString>;
}
extern "C" {
    #[link_name = "RedisModule_Call"]
    pub static mut RedisModule_Call:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          cmdname:
                                                              *const ::std::os::raw::c_char,
                                                          fmt:
                                                              *const ::std::os::raw::c_char, ...)
                                         -> *mut RedisModuleCallReply>;
}
extern "C" {
    #[link_name = "RedisModule_CallReplyProto"]
    pub static mut RedisModule_CallReplyProto:
               ::std::option::Option<unsafe extern "C" fn(reply:
                                                              *mut RedisModuleCallReply,
                                                          len: *mut usize)
                                         -> *const ::std::os::raw::c_char>;
}
extern "C" {
    #[link_name = "RedisModule_FreeCallReply"]
    pub static mut RedisModule_FreeCallReply:
               ::std::option::Option<unsafe extern "C" fn(reply:
                                                              *mut RedisModuleCallReply)>;
}
extern "C" {
    #[link_name = "RedisModule_CallReplyType"]
    pub static mut RedisModule_CallReplyType:
               ::std::option::Option<unsafe extern "C" fn(reply:
                                                              *mut RedisModuleCallReply)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_CallReplyInteger"]
    pub static mut RedisModule_CallReplyInteger:
               ::std::option::Option<unsafe extern "C" fn(reply:
                                                              *mut RedisModuleCallReply)
                                         -> ::std::os::raw::c_longlong>;
}
extern "C" {
    #[link_name = "RedisModule_CallReplyLength"]
    pub static mut RedisModule_CallReplyLength:
               ::std::option::Option<unsafe extern "C" fn(reply:
                                                              *mut RedisModuleCallReply)
                                         -> ::std::os::raw::c_ulong>;
}
extern "C" {
    #[link_name = "RedisModule_CallReplyArrayElement"]
    pub static mut RedisModule_CallReplyArrayElement:
               ::std::option::Option<unsafe extern "C" fn(reply:
                                                              *mut RedisModuleCallReply,
                                                          idx: usize)
                                         -> *mut RedisModuleCallReply>;
}
extern "C" {
    #[link_name = "RedisModule_CreateString"]
    pub static mut RedisModule_CreateString:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          ptr:
                                                              *const ::std::os::raw::c_char,
                                                          len: usize)
                                         -> *mut RedisModuleString>;
}
extern "C" {
    #[link_name = "RedisModule_CreateStringFromLongLong"]
    pub static mut RedisModule_CreateStringFromLongLong:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          ll:
                                                              ::std::os::raw::c_longlong)
                                         -> *mut RedisModuleString>;
}
extern "C" {
    #[link_name = "RedisModule_CreateStringFromString"]
    pub static mut RedisModule_CreateStringFromString:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          str:
                                                              *const RedisModuleString)
                                         -> *mut RedisModuleString>;
}
extern "C" {
    #[link_name = "RedisModule_CreateStringPrintf"]
    pub static mut RedisModule_CreateStringPrintf:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          fmt:
                                                              *const ::std::os::raw::c_char, ...)
                                         -> *mut RedisModuleString>;
}
extern "C" {
    #[link_name = "RedisModule_FreeString"]
    pub static mut RedisModule_FreeString:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          str:
                                                              *mut RedisModuleString)>;
}
extern "C" {
    #[link_name = "RedisModule_StringPtrLen"]
    pub static mut RedisModule_StringPtrLen:
               ::std::option::Option<unsafe extern "C" fn(str:
                                                              *const RedisModuleString,
                                                          len: *mut usize)
                                         -> *const ::std::os::raw::c_char>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithError"]
    pub static mut RedisModule_ReplyWithError:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          err:
                                                              *const ::std::os::raw::c_char)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithSimpleString"]
    pub static mut RedisModule_ReplyWithSimpleString:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          msg:
                                                              *const ::std::os::raw::c_char)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithArray"]
    pub static mut RedisModule_ReplyWithArray:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          len:
                                                              ::std::os::raw::c_long)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplySetArrayLength"]
    pub static mut RedisModule_ReplySetArrayLength:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          len:
                                                              ::std::os::raw::c_long)>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithStringBuffer"]
    pub static mut RedisModule_ReplyWithStringBuffer:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          buf:
                                                              *const ::std::os::raw::c_char,
                                                          len: usize)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithString"]
    pub static mut RedisModule_ReplyWithString:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          str:
                                                              *mut RedisModuleString)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithNull"]
    pub static mut RedisModule_ReplyWithNull:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithDouble"]
    pub static mut RedisModule_ReplyWithDouble:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          d: f64)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplyWithCallReply"]
    pub static mut RedisModule_ReplyWithCallReply:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          reply:
                                                              *mut RedisModuleCallReply)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_StringToLongLong"]
    pub static mut RedisModule_StringToLongLong:
               ::std::option::Option<unsafe extern "C" fn(str:
                                                              *const RedisModuleString,
                                                          ll:
                                                              *mut ::std::os::raw::c_longlong)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_StringToDouble"]
    pub static mut RedisModule_StringToDouble:
               ::std::option::Option<unsafe extern "C" fn(str:
                                                              *const RedisModuleString,
                                                          d: *mut f64)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_AutoMemory"]
    pub static mut RedisModule_AutoMemory:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)>;
}
extern "C" {
    #[link_name = "RedisModule_Replicate"]
    pub static mut RedisModule_Replicate:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          cmdname:
                                                              *const ::std::os::raw::c_char,
                                                          fmt:
                                                              *const ::std::os::raw::c_char, ...)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ReplicateVerbatim"]
    pub static mut RedisModule_ReplicateVerbatim:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_CallReplyStringPtr"]
    pub static mut RedisModule_CallReplyStringPtr:
               ::std::option::Option<unsafe extern "C" fn(reply:
                                                              *mut RedisModuleCallReply,
                                                          len: *mut usize)
                                         -> *const ::std::os::raw::c_char>;
}
extern "C" {
    #[link_name = "RedisModule_CreateStringFromCallReply"]
    pub static mut RedisModule_CreateStringFromCallReply:
               ::std::option::Option<unsafe extern "C" fn(reply:
                                                              *mut RedisModuleCallReply)
                                         -> *mut RedisModuleString>;
}
extern "C" {
    #[link_name = "RedisModule_DeleteKey"]
    pub static mut RedisModule_DeleteKey:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_StringSet"]
    pub static mut RedisModule_StringSet:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          str:
                                                              *mut RedisModuleString)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_StringDMA"]
    pub static mut RedisModule_StringDMA:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          len: *mut usize,
                                                          mode:
                                                              ::std::os::raw::c_int)
                                         -> *mut ::std::os::raw::c_char>;
}
extern "C" {
    #[link_name = "RedisModule_StringTruncate"]
    pub static mut RedisModule_StringTruncate:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          newlen: usize)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_GetExpire"]
    pub static mut RedisModule_GetExpire:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey)
                                         -> ::std::os::raw::c_longlong>;
}
extern "C" {
    #[link_name = "RedisModule_SetExpire"]
    pub static mut RedisModule_SetExpire:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          expire: mstime_t)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetAdd"]
    pub static mut RedisModule_ZsetAdd:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          score: f64,
                                                          ele:
                                                              *mut RedisModuleString,
                                                          flagsptr:
                                                              *mut ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetIncrby"]
    pub static mut RedisModule_ZsetIncrby:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          score: f64,
                                                          ele:
                                                              *mut RedisModuleString,
                                                          flagsptr:
                                                              *mut ::std::os::raw::c_int,
                                                          newscore: *mut f64)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetScore"]
    pub static mut RedisModule_ZsetScore:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          ele:
                                                              *mut RedisModuleString,
                                                          score: *mut f64)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetRem"]
    pub static mut RedisModule_ZsetRem:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          ele:
                                                              *mut RedisModuleString,
                                                          deleted:
                                                              *mut ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetRangeStop"]
    pub static mut RedisModule_ZsetRangeStop:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey)>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetFirstInScoreRange"]
    pub static mut RedisModule_ZsetFirstInScoreRange:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          min: f64, max: f64,
                                                          minex:
                                                              ::std::os::raw::c_int,
                                                          maxex:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetLastInScoreRange"]
    pub static mut RedisModule_ZsetLastInScoreRange:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          min: f64, max: f64,
                                                          minex:
                                                              ::std::os::raw::c_int,
                                                          maxex:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetFirstInLexRange"]
    pub static mut RedisModule_ZsetFirstInLexRange:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          min:
                                                              *mut RedisModuleString,
                                                          max:
                                                              *mut RedisModuleString)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetLastInLexRange"]
    pub static mut RedisModule_ZsetLastInLexRange:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          min:
                                                              *mut RedisModuleString,
                                                          max:
                                                              *mut RedisModuleString)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetRangeCurrentElement"]
    pub static mut RedisModule_ZsetRangeCurrentElement:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          score: *mut f64)
                                         -> *mut RedisModuleString>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetRangeNext"]
    pub static mut RedisModule_ZsetRangeNext:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetRangePrev"]
    pub static mut RedisModule_ZsetRangePrev:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ZsetRangeEndReached"]
    pub static mut RedisModule_ZsetRangeEndReached:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_HashSet"]
    pub static mut RedisModule_HashSet:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          flags:
                                                              ::std::os::raw::c_int, ...)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_HashGet"]
    pub static mut RedisModule_HashGet:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          flags:
                                                              ::std::os::raw::c_int, ...)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_IsKeysPositionRequest"]
    pub static mut RedisModule_IsKeysPositionRequest:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_KeyAtPos"]
    pub static mut RedisModule_KeyAtPos:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          pos:
                                                              ::std::os::raw::c_int)>;
}
extern "C" {
    #[link_name = "RedisModule_GetClientId"]
    pub static mut RedisModule_GetClientId:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> ::std::os::raw::c_ulonglong>;
}
extern "C" {
    #[link_name = "RedisModule_PoolAlloc"]
    pub static mut RedisModule_PoolAlloc:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          bytes: usize)
                                         -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    #[link_name = "RedisModule_CreateDataType"]
    pub static mut RedisModule_CreateDataType:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          name:
                                                              *const ::std::os::raw::c_char,
                                                          encver:
                                                              ::std::os::raw::c_int,
                                                          typemethods:
                                                              *mut RedisModuleTypeMethods)
                                         -> *mut RedisModuleType>;
}
extern "C" {
    #[link_name = "RedisModule_ModuleTypeSetValue"]
    pub static mut RedisModule_ModuleTypeSetValue:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey,
                                                          mt:
                                                              *mut RedisModuleType,
                                                          value:
                                                              *mut ::std::os::raw::c_void)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_ModuleTypeGetType"]
    pub static mut RedisModule_ModuleTypeGetType:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey)
                                         -> *mut RedisModuleType>;
}
extern "C" {
    #[link_name = "RedisModule_ModuleTypeGetValue"]
    pub static mut RedisModule_ModuleTypeGetValue:
               ::std::option::Option<unsafe extern "C" fn(key:
                                                              *mut RedisModuleKey)
                                         -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    #[link_name = "RedisModule_SaveUnsigned"]
    pub static mut RedisModule_SaveUnsigned:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          value: u64)>;
}
extern "C" {
    #[link_name = "RedisModule_LoadUnsigned"]
    pub static mut RedisModule_LoadUnsigned:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO)
                                         -> ::std::os::raw::c_ulong>;
}
extern "C" {
    #[link_name = "RedisModule_SaveSigned"]
    pub static mut RedisModule_SaveSigned:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          value: i64)>;
}
extern "C" {
    #[link_name = "RedisModule_LoadSigned"]
    pub static mut RedisModule_LoadSigned:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO)
                                         -> ::std::os::raw::c_long>;
}
extern "C" {
    #[link_name = "RedisModule_EmitAOF"]
    pub static mut RedisModule_EmitAOF:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          cmdname:
                                                              *const ::std::os::raw::c_char,
                                                          fmt:
                                                              *const ::std::os::raw::c_char, ...)>;
}
extern "C" {
    #[link_name = "RedisModule_SaveString"]
    pub static mut RedisModule_SaveString:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          s:
                                                              *mut RedisModuleString)>;
}
extern "C" {
    #[link_name = "RedisModule_SaveStringBuffer"]
    pub static mut RedisModule_SaveStringBuffer:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          str:
                                                              *const ::std::os::raw::c_char,
                                                          len: usize)>;
}
extern "C" {
    #[link_name = "RedisModule_LoadString"]
    pub static mut RedisModule_LoadString:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO)
                                         -> *mut RedisModuleString>;
}
extern "C" {
    #[link_name = "RedisModule_LoadStringBuffer"]
    pub static mut RedisModule_LoadStringBuffer:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          lenptr: *mut usize)
                                         -> *mut ::std::os::raw::c_char>;
}
extern "C" {
    #[link_name = "RedisModule_SaveDouble"]
    pub static mut RedisModule_SaveDouble:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          value: f64)>;
}
extern "C" {
    #[link_name = "RedisModule_LoadDouble"]
    pub static mut RedisModule_LoadDouble:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO)
                                         -> f64>;
}
extern "C" {
    #[link_name = "RedisModule_SaveFloat"]
    pub static mut RedisModule_SaveFloat:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          value: f32)>;
}
extern "C" {
    #[link_name = "RedisModule_LoadFloat"]
    pub static mut RedisModule_LoadFloat:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO)
                                         -> f32>;
}
extern "C" {
    #[link_name = "RedisModule_Log"]
    pub static mut RedisModule_Log:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          level:
                                                              *const ::std::os::raw::c_char,
                                                          fmt:
                                                              *const ::std::os::raw::c_char, ...)>;
}
extern "C" {
    #[link_name = "RedisModule_LogIOError"]
    pub static mut RedisModule_LogIOError:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO,
                                                          levelstr:
                                                              *const ::std::os::raw::c_char,
                                                          fmt:
                                                              *const ::std::os::raw::c_char, ...)>;
}
extern "C" {
    #[link_name = "RedisModule_StringAppendBuffer"]
    pub static mut RedisModule_StringAppendBuffer:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          str:
                                                              *mut RedisModuleString,
                                                          buf:
                                                              *const ::std::os::raw::c_char,
                                                          len: usize)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_RetainString"]
    pub static mut RedisModule_RetainString:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          str:
                                                              *mut RedisModuleString)>;
}
extern "C" {
    #[link_name = "RedisModule_StringCompare"]
    pub static mut RedisModule_StringCompare:
               ::std::option::Option<unsafe extern "C" fn(a:
                                                              *mut RedisModuleString,
                                                          b:
                                                              *mut RedisModuleString)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_GetContextFromIO"]
    pub static mut RedisModule_GetContextFromIO:
               ::std::option::Option<unsafe extern "C" fn(io:
                                                              *mut RedisModuleIO)
                                         -> *mut RedisModuleCtx>;
}
extern "C" {
    #[link_name = "RedisModule_BlockClient"]
    pub static mut RedisModule_BlockClient:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx,
                                                          reply_callback:
                                                              RedisModuleCmdFunc,
                                                          timeout_callback:
                                                              RedisModuleCmdFunc,
                                                          free_privdata:
                                                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                             *mut ::std::os::raw::c_void)>,
                                                          timeout_ms:
                                                              ::std::os::raw::c_longlong)
                                         -> *mut RedisModuleBlockedClient>;
}
extern "C" {
    #[link_name = "RedisModule_UnblockClient"]
    pub static mut RedisModule_UnblockClient:
               ::std::option::Option<unsafe extern "C" fn(bc:
                                                              *mut RedisModuleBlockedClient,
                                                          privdata:
                                                              *mut ::std::os::raw::c_void)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_IsBlockedReplyRequest"]
    pub static mut RedisModule_IsBlockedReplyRequest:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_IsBlockedTimeoutRequest"]
    pub static mut RedisModule_IsBlockedTimeoutRequest:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_GetBlockedClientPrivateData"]
    pub static mut RedisModule_GetBlockedClientPrivateData:
               ::std::option::Option<unsafe extern "C" fn(ctx:
                                                              *mut RedisModuleCtx)
                                         -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    #[link_name = "RedisModule_AbortBlock"]
    pub static mut RedisModule_AbortBlock:
               ::std::option::Option<unsafe extern "C" fn(bc:
                                                              *mut RedisModuleBlockedClient)
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "RedisModule_Milliseconds"]
    pub static mut RedisModule_Milliseconds:
               ::std::option::Option<unsafe extern "C" fn()
                                         -> ::std::os::raw::c_longlong>;
}
extern "C" {
    pub fn RedisModule_Init(ctx: *mut RedisModuleCtx,
                            name: *const ::std::os::raw::c_char,
                            ver: ::std::os::raw::c_int,
                            apiver: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
